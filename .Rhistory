library(dplyr)
library(jsonlite)
library(stringr)
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
movies = subset(movies,select = c(id,title,genres,popularity,revenue,runtime,vote_average,vote_count)) #drop unnecessary columns
movies = movies[movies$genres != "[]",]
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
t <- strsplit(movies$genres, split = ",")
tags <- unique(str_trim(unlist(t)))
tags = tags[tags!=""]
df2 <- as.data.frame(Reduce(cbind, lapply(tags, function(i) sapply(t, function(j) +(any(grepl(i, j), na.rm = TRUE))))))
names(df2) <- tags
movies=cbind(movies,df2)
movies = subset(movies,select = c(id,title,popularity,revenue,runtime,9:28,vote_average,vote_count)) #change column orderings
summary(movies$vote_average)
ggplot(data=movies,aes(x="vote_average",y=vote_average))+geom_boxplot()
summary(movies$popularity)
ggplot(data=movies,aes(x="popularity",y=popularity))+geom_boxplot()
ggplot(data=movies,mapping = aes(x=movies$vote_average,y=movies$budget))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$vote_average,y=movies$popularity))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$vote_average,y=movies$vote_count))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$vote_average,y=movies$revenue))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$vote_average,y=movies$runtime))+
geom_point()
movies
View(json_df)
View(movies)
sum(is.na(movies))
mean(is.na(movies))
mean(is.na(movies[1]))
mean(is.na(movies[2]))
mean(is.na(movies[3]))
mean(is.na(movies[4]))
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
if(movies[i] == NA){
print(i+" - "+movies[i])
}
}
movies[1]
movies[1]
for(i in 1:nrow(movies)){
if(movies[i] = NA){
print(i+" - "+movies[i])
}
}
for(i in 1:nrow(movies)){
if(is.na(movies[i])){
print(i+" - "+movies[i])
}
}
for(i in 1:ncloumn(movies)){
if(is.na(movies[i])){
print(i+" - "+movies[i])
}
}
for(i in 1:27){
if(is.na(movies[i])){
print(i+" - "+movies[i])
}
}
warnings()
for(i in 1:27){
if(is.na(movies[,i])){
print(i+" - "+movies[,i])
}
}
View(movies)
nrow(movies)
((25/100)*nrow(movies))
#draw box plot of Popularity feature.(column=2)
Q1 = ((25/100)*nrow(movies))
Q1
as.integer(Q1)
int = (25/100)*nrow(movies)
rem = int - as.integer(int)
int = as.integer(int)
int
rem
moview[1193]
movies[1193]
movies[1193, 2]
movies[1193, 3]
View(movies)
movies[1, 3]
int = (25/100)*nrow(movies)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
Q1 = movies[int, 3]
}else{
Q1 = (1 - rem)*movies[int, 3]+(rem*movies[int+1, 3])
}
Q1
int = (75/100)*nrow(movies)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
Q3 = movies[int, 3]
}else{
Q3 = (1 - rem)*movies[int, 3]+(rem*movies[int+1, 3])
}
q
Q3
int
#draw box plot of Popularity feature.(column=3)
int = (25/100)*nrow(movies)
int
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
orderedData <- movies[order(moview$popularity),]
orderedData <- movies[order(movies$popularity),]
orderedData
View(orderedData)
View(movies)
orderedData <- movies[order(popularity),]
orderedData <- movies[order(movies$popularity), 3]
orderedData
order(movies$popularity)
movies[order(movies$popularity),]
View(movies)
orderedData <- movies[order(movies$popularity),]
View(orderedData)
View(orderedData)
View(movies)
View(movies)
orderedData <- movies[order(movies$popularity),]
int = (25/100)*nrow(orderedData)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
Q1 = orderedData[int, 3]
}else{
Q1 = (1 - rem)*orderedData[int, 3]+(rem*orderedData[int+1, 3])
}
Q1
int
int = (75/100)*nrow(orderedData)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
Q3 = orderedData[int, 3]
}else{
Q3 = (1 - rem)*orderedData[int, 3]+(rem*orderedData[int+1, 3])
}
int
Q3
IQR = Q3 - Q1
Iq
IQR
orderedData[nrow(orderedData)/2, 3]
int = (50/100)*nrow(orderedData)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
MEDIAN = orderedData[int, 3]
}else{
MEDIAN = (1 - rem)*orderedData[int, 3]+(rem*orderedData[int+1, 3])
}
int
MEDIAN
nrow(orderedData)
nrow(orderedData)/2
orderedData[2387, 3]
orderedData[2388, 3]
orderedData[2389, 3]
orderedData[2386, 3]
MIN = Q1 - (1.5 * IQR)
MAX = Q3 + (1.5 * IQR)
MIN
MAX
boxplot(popularity~revenue,data=orderedData, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(popularity~revenue,data=orderedData, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(mpg,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
outlier_values <- boxplot.stats(orderedData$popularity)$out  # outlier values.
boxplot(orderedData$popularity, main="Pressure Height", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
nrow(orderedData[,3] > 86,)
nrow(orderedData[,3] > 86)
nrow(orderedData[,3] > 50)
orderedData[,3] > 50
outlier_values
a = 0;
for(i in nrow(orderedData)){
if(orderedData[i, 3] > MAX){
a = a + 1
}
}
a
a = 0;
for(i in nrow(orderedData)){
if(orderedData[i, 3] > MAX){
a = a + 1
}
}
a
orderedData[i, 3]
a = 0;
for(i in 1:nrow(orderedData)){
if(orderedData[i, 3] > MAX){
a = a + 1
}
}
a
outlier_values
OUTLIERS <- boxplot(orderedData$popularity)$out #outlier values.
print(OUTLIERS)
orderedData[which(orderedData$popularity %in% OUTLIERS),]
orderedData <- orderedData[-which(orderedData$popularity %in% OUTLIERS),]
nrow(orderedData)
orderedData <- movies[order(movies$popularity),]
nrow(orderedData)
4775 - 4502
#replace missing value with mean value of popularity
MEAN <- mean(orderedData[, 3])
MEAN
is.na(orderedData)
nrow(is.na(orderedData))
sum(is.na(orderedData))
sum(is.na(orderedData[,3]))
sum(is.na(orderedData[,1]))
sum(is.na(orderedData[,2]))
sum(is.na(orderedData[,4]))
sum(is.na(orderedData[,5]))
summary(orderedData[,3])
install.packages("classInt")
library("classInt", lib.loc="~/R/win-library/3.5")
library(classInt)
classIntervals(orderedData[, 3], 20)
x <- classIntervals(orderedData[, 3], 20, style = 'equal')
x
x
x
plot(x, main="Frequency", ylab="Number of Houses",col="bisque")
plot(x, main="Frequency", ylab="Number of Houses",col="bisque")
x <- 5
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "13-15)")
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
x <- 5
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "13-15)")
# inspect bins
summary(bins)
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
x <- 5
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)")
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
x <- 20
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE)
# inspect bins
summary(bins)
x <- 100
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE)
# inspect bins
summary(bins)
nx <- length(orderedData[, 3])
nrepl <- floor(nx/20)
nplus <- sample(1:20,nx - nrepl*20)
nrep <- rep(nrepl,20)
nrep[nplus] <- nrepl+1
x <- rep(seq.int(20),nrep)
x
nx <- length(orderedData[, 3])
nrepl <- floor(nx/20)
nplus <- sample(1:20,nx - nrepl*20)
nrep <- rep(nrepl,20)
nrep[nplus] <- nrepl+1
x <- rep(seq.int(20),nrep)
x
x <- 5
# specify interval/bin labels
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
x <- 10
# specify interval/bin labels
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<2", "2-5)", "5-8)", "8-10)", "10-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
x <- 10
# specify interval/bin labels
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<2", "2-5)", "5-8)", "8-10)", "10-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
x <- 10
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
x <- 10
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
x <- 100
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
x <- 20
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
x <- 1000
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
"
int = (25/100)*nrow(orderedData)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
Q1 = orderedData[int, 3]
}else{
Q1 = (1 - rem)*orderedData[int, 3]+(rem*orderedData[int+1, 3])
}
#Q1 percentile found
int = (75/100)*nrow(orderedData)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
Q3 = orderedData[int, 3]
}else{
Q3 = (1 - rem)*orderedData[int, 3]+(rem*orderedData[int+1, 3])
}
#Q3 percentile found
int = (50/100)*nrow(orderedData)
rem = int - as.integer(int)
int = as.integer(int)
if(rem == 0){
MEDIAN = orderedData[int, 3]
}else{
MEDIAN = (1 - rem)*orderedData[int, 3]+(rem*orderedData[int+1, 3])
}
#MEDIAN or 50th percentile found
IQR = Q3 - Q1 #Inter quantile range found
MIN = Q1 - (1.5 * IQR)
MAX = Q3 + (1.5 * IQR)
"
x <- 20
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
x <- 20
# specify interval/bin label
labels <- c("<2", "2-5)", "5-8)", "8-10)", "10-13)", "<3", "3-5)", "3-8)", "3-10)", "3-13)")
# bucketing data points into bins
bins <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(bins)
plot(bins, main="20 bins", ylab="Number of Popularity Instance",xlab="Popularity Values")
x <- 20
# bucketing data points into bins
POPULARITY_BINS <- cut(orderedData[,3], x, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(POPULARITY_BINS)
plot(POPULARITY_BINS, main="20 bins", ylab="Number of Popularity Instance",xlab="Popularity Values")
BINS_COUNT <- 20
# bucketing data points into bins
POPULARITY_BINS <- cut(orderedData[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(POPULARITY_BINS)
plot(POPULARITY_BINS, main=BINS_COUNT+" bins", ylab="Number of Popularity Instance",xlab="Popularity Values")
BINS_COUNT <- 21
# bucketing data points into bins
POPULARITY_BINS <- cut(orderedData[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(POPULARITY_BINS)
plot(POPULARITY_BINS, main=BINS_COUNT+" bins", ylab="Number of Popularity Instance",xlab="Popularity Values")
BINS_COUNT <- 21
# bucketing data points into bins
POPULARITY_BINS <- cut(orderedData[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(POPULARITY_BINS)
plot(POPULARITY_BINS, main=BINS_COUNT+" bins", ylab="Number of Popularity Instance",xlab="Popularity Values")
BINS_COUNT <- 21
# bucketing data points into bins
POPULARITY_BINS <- cut(orderedData[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(POPULARITY_BINS)
plot(POPULARITY_BINS, main=BINS_COUNT," bins", ylab="Number of Popularity Instance",xlab="Popularity Values")
View(orderedData)
orderedData <- orderedData[order(orderedData$revenue),]
View(orderedData)
View(orderedData)
orderedData <- orderedData[order(orderedData$revenue),]
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(orderedData$revenue)$out #outlier values.
orderedData <- orderedData[-which(orderedData$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
OUTLIERS
BINS_COUNT <- 20
# bucketing data points into bins
REVENUE_BINS <- cut(orderedData[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(REVENUE_BINS)
plot(REVENUE_BINS, main="20 bins", ylab="Number of Revenue Instance",xlab="Revenue Values")
BINS_COUNT <- 50
# bucketing data points into bins
REVENUE_BINS <- cut(orderedData[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(REVENUE_BINS)
plot(REVENUE_BINS, main="20 bins", ylab="Number of Revenue Instance",xlab="Revenue Values")
BINS_COUNT <- 10
# bucketing data points into bins
REVENUE_BINS <- cut(orderedData[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(REVENUE_BINS)
plot(REVENUE_BINS, main="20 bins", ylab="Number of Revenue Instance",xlab="Revenue Values")
BINS_COUNT <- 20
# bucketing data points into bins
REVENUE_BINS <- cut(orderedData[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(REVENUE_BINS)
plot(REVENUE_BINS, main="20 bins", ylab="Number of Revenue Instance",xlab="Revenue Values")
View(mydf)
View(mydf)
View(orderedData)
View(orderedData)
orderedData <- orderedData[order(orderedData$vote_average),]
#draw box plot of Vote-Average feature.(column=26)
OUTLIERS <- boxplot(orderedData$vote_average)$out #outlier values.
orderedData <- orderedData[-which(orderedData$vote_average %in% OUTLIERS),] # Removed outlier values from vote_average column
View(orderedData)
View(orderedData)
OUTLIERS
BINS_COUNT <- 20
# bucketing data points into bins
VOTE_AVERAGE_BINS <- cut(orderedData[,26], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(VOTE_AVERAGE_BINS)
plot(VOTE_AVERAGE_BINS, main="20 bins", ylab="Number of Vote-Average Instance",xlab="Vote-Average Values")
BINS_COUNT <- 30
# bucketing data points into bins
VOTE_AVERAGE_BINS <- cut(orderedData[,26], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(VOTE_AVERAGE_BINS)
plot(VOTE_AVERAGE_BINS, main="20 bins", ylab="Number of Vote-Average Instance",xlab="Vote-Average Values")
orderedData <- orderedData[order(orderedData$vote_count),]
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(orderedData$vote_count)$out #outlier values.
orderedData <- orderedData[-which(orderedData$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
OUTLIERS
BINS_COUNT <- 30
# bucketing data points into bins
VOTE_COUNT_BINS <- cut(orderedData[,27], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
# inspect bins
summary(VOTE_COUNT_BINS)
plot(VOTE_COUNT_BINS, main="20 bins", ylab="Number of Vote-Count Instance",xlab="Vote-Count Values")
sum(is.na(orderedData))
sum(is.na(orderedData[,1]))
sum(is.na(orderedData[,1]))
sum(is.na(orderedData[,2]))
sum(is.na(orderedData[,3]))
sum(is.na(orderedData[,4]))
sum(is.na(orderedData[,5]))
