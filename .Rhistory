movies=movies[!is.na(movies$runtime),]
cor(movies$vote_average,movies$vote_count)
cor(movies$vote_average,movies$runtime)
revenue_zeros = movies$revenue[movies$revenue == 0]
length(revenue_zeros)
length(revenue_zeros) / length(movies$revenue)
popularity_zeros = movies$popularity[movies$popularity == 0]
length(popularity_zeros)
length(popularity_zeros) / length(movies$popularity)
ggplot(movies, aes(x=vote_average)) + geom_histogram()
ggplot(movies, aes(x=vote_count)) + geom_histogram()
ggplot(data=movies,mapping = aes(x=movies$vote_count,y=movies$vote_average))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$runtime,y=movies$vote_average))+
geom_point()
summary(movies$vote_average)
ggplot(data=movies,aes(x="vote_average",y=vote_average))+geom_boxplot()
#draw box plot of Popularity feature.(column=3)
OUTLIERS <- boxplot(movies$popularity)$out #outlier values.
movies <- movies[-which(movies$popularity %in% OUTLIERS),] # Removed outlier values from popularity column
BINS_COUNT <- 20
# bucketing data points into bins
movies$popularity_cat <- cut(movies[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(movies$revenue)$out #outlier values.
movies <- movies[-which(movies$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
BINS_COUNT <- 20
# bucketing data points into bins
movies$revenue_cat <- cut(movies[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(movies$vote_count)$out #outlier values.
movies <- movies[-which(movies$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
BINS_COUNT <- 30
# bucketing data points into bins
movies$vote_count_cat <- cut(movies[,27], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
sep = c(-Inf,mean(movies$vote_average),Inf)
movie_types = c("Bad","Good")
movies$vote_average_cat <- cut(movies$vote_average,breaks = sep,labels = movie_types)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:100){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance",subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
sd(dt_acc)*100
max(dt_acc)*100 - min(dt_acc)*100
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Iris With Different Subsets of Data")
ir.tr <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance")
ir.tr
# display the results
summary(ir.tr)
movies[,6:8] = movies[,6:8] == 1
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
movies = subset(movies,select = c(id,title,genres,popularity,revenue,runtime,vote_average,vote_count)) #drop unnecessary columns
movies = movies[movies$genres != "[]",]
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
t <- strsplit(movies$genres, split = ",")
tags <- unique(str_trim(unlist(t)))
tags = tags[tags!=""]
df2 <- as.data.frame(Reduce(cbind, lapply(tags, function(i) sapply(t, function(j) +(any(grepl(i, j), na.rm = TRUE))))))
names(df2) <- tags
movies=cbind(movies,df2)
movies = subset(movies,select = c(id,title,popularity,revenue,runtime,9:28,vote_average,vote_count)) #change column orderings
movies=movies[movies$vote_average != 0,]
movies=movies[!is.na(movies$runtime),]
cor(movies$vote_average,movies$vote_count)
cor(movies$vote_average,movies$runtime)
revenue_zeros = movies$revenue[movies$revenue == 0]
length(revenue_zeros)
length(revenue_zeros) / length(movies$revenue)
popularity_zeros = movies$popularity[movies$popularity == 0]
length(popularity_zeros)
length(popularity_zeros) / length(movies$popularity)
ggplot(movies, aes(x=vote_average)) + geom_histogram()
ggplot(movies, aes(x=vote_count)) + geom_histogram()
ggplot(data=movies,mapping = aes(x=movies$vote_count,y=movies$vote_average))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$runtime,y=movies$vote_average))+
geom_point()
summary(movies$vote_average)
ggplot(data=movies,aes(x="vote_average",y=vote_average))+geom_boxplot()
#draw box plot of Popularity feature.(column=3)
OUTLIERS <- boxplot(movies$popularity)$out #outlier values.
movies <- movies[-which(movies$popularity %in% OUTLIERS),] # Removed outlier values from popularity column
BINS_COUNT <- 20
# bucketing data points into bins
movies$popularity_cat <- cut(movies[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(movies$revenue)$out #outlier values.
movies <- movies[-which(movies$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
BINS_COUNT <- 20
# bucketing data points into bins
movies$revenue_cat <- cut(movies[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(movies$vote_count)$out #outlier values.
movies <- movies[-which(movies$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
BINS_COUNT <- 30
# bucketing data points into bins
movies$vote_count_cat <- cut(movies[,27], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
sep = c(-Inf,mean(movies$vote_average),Inf)
movie_types = c("Bad","Good")
movies$vote_average_cat <- cut(movies$vote_average,breaks = sep,labels = movie_types)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:100){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance",subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
sd(dt_acc)*100
movies[,6:25] = movies[,6:25] == 1
require(naivebayes)
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
movies = subset(movies,select = c(id,title,genres,popularity,revenue,runtime,vote_average,vote_count)) #drop unnecessary columns
movies = movies[movies$genres != "[]",]
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
t <- strsplit(movies$genres, split = ",")
tags <- unique(str_trim(unlist(t)))
tags = tags[tags!=""]
df2 <- as.data.frame(Reduce(cbind, lapply(tags, function(i) sapply(t, function(j) +(any(grepl(i, j), na.rm = TRUE))))))
names(df2) <- tags
movies=cbind(movies,df2)
movies = subset(movies,select = c(id,title,popularity,revenue,runtime,9:28,vote_average,vote_count)) #change column orderings
movies=movies[movies$vote_average != 0,]
movies=movies[!is.na(movies$runtime),]
cor(movies$vote_average,movies$vote_count)
cor(movies$vote_average,movies$runtime)
revenue_zeros = movies$revenue[movies$revenue == 0]
length(revenue_zeros)
length(revenue_zeros) / length(movies$revenue)
popularity_zeros = movies$popularity[movies$popularity == 0]
length(popularity_zeros)
length(popularity_zeros) / length(movies$popularity)
ggplot(movies, aes(x=vote_average)) + geom_histogram()
ggplot(movies, aes(x=vote_count)) + geom_histogram()
ggplot(data=movies,mapping = aes(x=movies$vote_count,y=movies$vote_average))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$runtime,y=movies$vote_average))+
geom_point()
summary(movies$vote_average)
ggplot(data=movies,aes(x="vote_average",y=vote_average))+geom_boxplot()
#draw box plot of Popularity feature.(column=3)
OUTLIERS <- boxplot(movies$popularity)$out #outlier values.
movies <- movies[-which(movies$popularity %in% OUTLIERS),] # Removed outlier values from popularity column
BINS_COUNT <- 20
# bucketing data points into bins
movies$popularity_cat <- cut(movies[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(movies$revenue)$out #outlier values.
movies <- movies[-which(movies$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
BINS_COUNT <- 20
# bucketing data points into bins
movies$revenue_cat <- cut(movies[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(movies$vote_count)$out #outlier values.
movies <- movies[-which(movies$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
BINS_COUNT <- 30
# bucketing data points into bins
movies$vote_count_cat <- cut(movies[,27], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
sep = c(-Inf,mean(movies$vote_average),Inf)
movie_types = c("Bad","Good")
movies$vote_average_cat <- cut(movies$vote_average,breaks = sep,labels = movie_types)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
movies[,6:25] = movies[,6:25] == 1
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:100){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance",subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
sd(dt_acc)*100
max(dt_acc)*100 - min(dt_acc)*100
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Iris With Different Subsets of Data")
ir.tr <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance")
ir.tr
# display the results
summary(ir.tr)
misclass.tree(ir.tr)
# visualize DT
plot(ir.tr,  type = "uniform")
text(ir.tr)
# visualize DT
plot(ir.tr,  type = "uniform")
text(ir.tr)
require(randomForest)
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- randomForest(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
sd(dt_acc)*100
max(dt_acc)*100 - min(dt_acc)*100
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Iris With Different Subsets of Data")
require(naivebayes)
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
ir.tr <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies)
ir.tr
?naive_bayes
plot(ir.tr)
ir.tr <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
movies = subset(movies,select = c(id,title,genres,popularity,revenue,runtime,vote_average,vote_count)) #drop unnecessary columns
movies = movies[movies$genres != "[]",]
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
t <- strsplit(movies$genres, split = ",")
tags <- unique(str_trim(unlist(t)))
tags = tags[tags!=""]
df2 <- as.data.frame(Reduce(cbind, lapply(tags, function(i) sapply(t, function(j) +(any(grepl(i, j), na.rm = TRUE))))))
names(df2) <- tags
movies=cbind(movies,df2)
movies = subset(movies,select = c(id,title,popularity,revenue,runtime,9:28,vote_average,vote_count)) #change column orderings
movies=movies[movies$vote_average != 0,]
movies=movies[!is.na(movies$runtime),]
cor(movies$vote_average,movies$vote_count)
cor(movies$vote_average,movies$runtime)
revenue_zeros = movies$revenue[movies$revenue == 0]
length(revenue_zeros)
length(revenue_zeros) / length(movies$revenue)
popularity_zeros = movies$popularity[movies$popularity == 0]
length(popularity_zeros)
length(popularity_zeros) / length(movies$popularity)
ggplot(movies, aes(x=vote_average)) + geom_histogram()
ggplot(movies, aes(x=vote_count)) + geom_histogram()
ggplot(data=movies,mapping = aes(x=movies$vote_count,y=movies$vote_average))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$runtime,y=movies$vote_average))+
geom_point()
summary(movies$vote_average)
ggplot(data=movies,aes(x="vote_average",y=vote_average))+geom_boxplot()
#draw box plot of Popularity feature.(column=3)
OUTLIERS <- boxplot(movies$popularity)$out #outlier values.
movies <- movies[-which(movies$popularity %in% OUTLIERS),] # Removed outlier values from popularity column
BINS_COUNT <- 20
# bucketing data points into bins
movies$popularity_cat <- cut(movies[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(movies$revenue)$out #outlier values.
movies <- movies[-which(movies$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
BINS_COUNT <- 20
# bucketing data points into bins
movies$revenue_cat <- cut(movies[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(movies$vote_count)$out #outlier values.
movies <- movies[-which(movies$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
BINS_COUNT <- 30
# bucketing data points into bins
movies$vote_count_cat <- cut(movies[,27], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
sep = c(-Inf,mean(movies$vote_average),Inf)
movie_types = c("Bad","Good")
movies$vote_average_cat <- cut(movies$vote_average,breaks = sep,labels = movie_types)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
ir.tr <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies)
ir.tr
plot(ir.tr)
ir.tr <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
ir.tr
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
?naive_bayes
?predict
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- naive_bayes(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
movies = subset(movies,select = c(id,title,genres,popularity,revenue,runtime,vote_average,vote_count)) #drop unnecessary columns
movies = movies[movies$genres != "[]",]
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
t <- strsplit(movies$genres, split = ",")
tags <- unique(str_trim(unlist(t)))
tags = tags[tags!=""]
df2 <- as.data.frame(Reduce(cbind, lapply(tags, function(i) sapply(t, function(j) +(any(grepl(i, j), na.rm = TRUE))))))
names(df2) <- tags
movies=cbind(movies,df2)
movies = subset(movies,select = c(id,title,popularity,revenue,runtime,9:28,vote_average,vote_count)) #change column orderings
movies=movies[movies$vote_average != 0,]
movies=movies[!is.na(movies$runtime),]
cor(movies$vote_average,movies$vote_count)
cor(movies$vote_average,movies$runtime)
revenue_zeros = movies$revenue[movies$revenue == 0]
length(revenue_zeros)
length(revenue_zeros) / length(movies$revenue)
popularity_zeros = movies$popularity[movies$popularity == 0]
length(popularity_zeros)
length(popularity_zeros) / length(movies$popularity)
ggplot(movies, aes(x=vote_average)) + geom_histogram()
ggplot(movies, aes(x=vote_count)) + geom_histogram()
ggplot(data=movies,mapping = aes(x=movies$vote_count,y=movies$vote_average))+
geom_point()
ggplot(data=movies,mapping = aes(x=movies$runtime,y=movies$vote_average))+
geom_point()
summary(movies$vote_average)
ggplot(data=movies,aes(x="vote_average",y=vote_average))+geom_boxplot()
#draw box plot of Popularity feature.(column=3)
OUTLIERS <- boxplot(movies$popularity)$out #outlier values.
movies <- movies[-which(movies$popularity %in% OUTLIERS),] # Removed outlier values from popularity column
BINS_COUNT <- 20
# bucketing data points into bins
movies$popularity_cat <- cut(movies[,3], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(movies$revenue)$out #outlier values.
movies <- movies[-which(movies$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
BINS_COUNT <- 20
# bucketing data points into bins
movies$revenue_cat <- cut(movies[,4], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(movies$vote_count)$out #outlier values.
movies <- movies[-which(movies$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
BINS_COUNT <- 30
# bucketing data points into bins
movies$vote_count_cat <- cut(movies[,27], BINS_COUNT, include.lowest = T, right=FALSE, labels=)
sep = c(-Inf,mean(movies$vote_average),Inf)
movie_types = c("Bad","Good")
movies$vote_average_cat <- cut(movies$vote_average,breaks = sep,labels = movie_types)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
movies[,6:25] = movies[,6:25] == 1
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:100){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance",subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
sd(dt_acc)*100
max(dt_acc)*100 - min(dt_acc)*100
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Iris With Different Subsets of Data")
ir.tr <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies, split = "deviance")
ir.tr
# display the results
summary(ir.tr)
misclass.tree(ir.tr)
# visualize DT
plot(ir.tr,  type = "uniform")
text(ir.tr)
require(randomForest)
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:50){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
fit2 <- randomForest(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity_cat + revenue_cat + vote_count_cat,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
sd(dt_acc)*100
max(dt_acc)*100 - min(dt_acc)*100
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Iris With Different Subsets of Data")
