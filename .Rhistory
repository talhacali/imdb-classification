?sample
?tree
ir.tr2 <- tree(Species ~ ., data = iris, subset = sub)
summary(ir.tr2)
misclass.tree(ir.tr2)
# plot final DT
plot(ir.tr2,  type = "uniform")
text(ir.tr2)
?tree
?tree.control
_tree
?tree
# construct a DT with tree function using entire "iris" data set
ir.tr <- tree(Species ~ ., data=iris, split = "deviance")
ir.tr
# display the results
summary(ir.tr)
?predict
# Compute training performance of the DT by using only training samples (their indices were saved in the "sub" vector)
train_predict <- table(predict(ir.tr2, iris[sub, ], type = "class"), iris[sub, "Species"])
rownames(train_predict) <- paste("Actual", rownames(train_predict), sep = ":")
colnames(train_predict) <- paste("Predicted", colnames(train_predict), sep = ":")
print(train_predict)
# Compute training performance of the DT by using only training samples (their indices were saved in the "sub" vector)
train_predict <- table(predict(ir.tr2, iris[sub, ], type = "class"), iris[sub, "Species"])
# Compute test performance of the DT  by using only test samples
test_predict <- table(predict(ir.tr2, iris[-sub, ], type = "class"), iris[-sub, "Species"])
rownames(test_predict) <- paste("Actual", rownames(test_predict), sep = ":")
colnames(test_predict) <- paste("Predicted", colnames(test_predict), sep = ":")
print(test_predict)
dt_acc <- numeric()
set.seed(1815850)
for(i in 1:100){
sub <- sample(1:nrow(iris), size=nrow(iris)*0.7)
fit2 <- tree(Species ~ ., data = iris, subset = sub)
test_predict <- table(predict(fit2, iris[-sub, ], type = "class"), iris[-sub, "Species"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
}
mean(dt_acc)
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Iris With Different Subsets of Data")
library(class) # Contains the "knn" function
set.seed(498593) #Set the seed for reproducibility
#Create partitions in the Iris data set (70% for training, 30% for testing/evaluation)
ir_sample <- sample(1:nrow(iris), size=nrow(iris)*0.7)
ir_train <- iris[ir_sample, ] #Select the 70% of rows
ir_test <- iris[-ir_sample, ] #Select the 30% of rows
#First try to determine the right K-value
iris_acc <- numeric() #holding variable
for(i in 1:20){
#Apply knn with k = i
predict <- knn(train=ir_train[,-5], test=ir_test[,-5], cl=ir_train$Species, k=i)
iris_acc <- c(iris_acc, mean(predict==ir_test$Species))
}
#Plot error rates for k=1 to 20
plot(1-iris_acc, type="l", ylab="Error Rate",  xlab="K", main="Error Rate for Iris with varying K")
# Average accuracy of 20 k-values
mean(iris_acc)
trial_sum <- numeric(20)
trial_n <- numeric(20)
for(i in 1:100){
ir_sample <- sample(1:nrow(iris), size=nrow(iris)*0.7)
ir_train <- iris[ir_sample,]
ir_test <- iris[-ir_sample,]
test_size <- nrow(ir_test)
for(j in 1:20){
predict <- knn(ir_train[,-5], ir_test[,-5], ir_train$Species, k=j)
trial_sum[j] <- trial_sum[j] + sum(predict==ir_test$Species)
trial_n[j] <- trial_n[j] + test_size
}
}
plot(1-trial_sum / trial_n, type="l", ylab="Error Rate",xlab="K",main="Error Rate for Iris With Varying K (100 Samples)")
gene <- c("AKT1", "TP53", "VEGFA", "MAPK8")
id <- c(100, 500, 238, 1239)
mutation <- c(TRUE, FALSE, TRUE, FALSE)
target <- c(TRUE, TRUE, TRUE, FALSE)
gene_data <- data.frame(id=id, name=gene,mut=mutation, drugT = target)
gene_data
gene_data[gene_data$mut==TRUE,]
gene_data[gene_data$mut,]
#6 - a
mtcars <- data.frame(mtcars)
dims <- dim(mtcars)
dims[1]
#6 - b
smallc <- subset(mtcars,subset = cyl <= 6)
smallc
temp_small <- mtcars[mtcars$cyl<=6,]
temp_small
temp_small <- mtcars[mtcars$cyl<=6,c("mpg","disp")]
temp_small
#8
name <- c("Ali","Cenk","Mete")
age <- c(26,32,29)
salary <- c(2700, 3200, 4900)
company <- data.frame(name=name,age=age,salary=salary)
company
max_salary <- max(company[,"salary"])
max_salary
for (i in c(1:dim(company)[1])) {
if(max_salary == company[i,"salary"]){
print(company[i,"name"])
}
}
apply(gene_data$id,1,mean)
apply(gene_data$id,1,sum)
class(gene_data$id)
gene_data$id
apply(gene_data$id,0,sum)
dim(gene_data$id)
typeof(gene_data$id)
#2.a
data(iris)
dim(iris)
#2.b
apply(iris[,1:4],2,mean)
apply(gene_data$id,2,sum)
gene <- c("AKT1", "TP53", "VEGFA", "MAPK8")
id <- c(100, 500, 238, 1239)
mutation <- c(TRUE, FALSE, TRUE, FALSE)
target <- c(TRUE, TRUE, TRUE, FALSE)
gene_data <- data.frame(id=id, name=gene,mut=mutation, drugT = target)
gene_data[gene_data$mut,]
dim(gene_data$id)
apply(gene_data$id,2,sum)
apply(gene_data[,1],2,sum)
gene_data
apply(gene_data[,2],2,sum)
gene_data$id
iris[,1:4]
gene <- c("AKT1", "TP53", "VEGFA", "MAPK8")
id <- c(100, 500, 238, 1239)
k <- c(500,200,111,666)
mutation <- c(TRUE, FALSE, TRUE, FALSE)
target <- c(TRUE, TRUE, TRUE, FALSE)
gene_data <- data.frame(id=id, k=k,name=gene,mut=mutation, drugT = target)
gene_data[gene_data$mut,]
gene_data$id
apply(gene_data[,1:2],2,sum)
sum(gene_data$id)
apply(gene_data[,1:2],2,mean)
#2.c
mylist <- list(iris[1:10,1:4])
mylist
#2.d
retlist <- lapply(mylist,sum)
#2.d
retlist <- lapply(mylist[[1]],sum)
retlist[3]
#2.d
retlist <- lapply(mylist,sum)
retlist[3]
mylist
#2.d
retlist <- lapply(mylist[[1]],sum)
retlist[3]
#3.a
inp <- c("Veli","Deli","Ali","Ayşe","Ahmet")
inp[which(inp == "Ali")]
#3.a
inp <- c("Veli","Deli","Ali","Ayşe","Ali","Ahmet")
inp[which(inp == "Ali")]
#4.a
proteinData=read.table("Protein.txt", header = TRUE, sep = "\t", quote = "\"'",dec = ",")
dim(proteinData)
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
setwd("~/Desktop/imdb-classification")
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
View(movies)
?cor
library(ggplot2)
library(purrr)
setwd("~/Desktop/imdb-classification")
library(ggplot2)
library(purrr)
library(dplyr)
library(jsonlite)
library(stringr)
library(classInt)
library(tree)
movies <- read.csv("tmdb_5000_movies.csv",stringsAsFactors = FALSE)
movies = subset(movies,select = c(id,title,genres,popularity,revenue,runtime,vote_average,vote_count)) #drop unnecessary columns
movies = movies[movies$genres != "[]",]
convert_json <- function(x){
json_df = fromJSON(x)
ret_genres=''
for(i in 1:nrow(json_df)){
ret_genres = paste(ret_genres,json_df[i,2],sep=',')
}
return(ret_genres)
}
for(i in 1:nrow(movies)){
movies$genres[i] = convert_json(movies$genres[i])
}
t <- strsplit(movies$genres, split = ",")
tags <- unique(str_trim(unlist(t)))
tags = tags[tags!=""]
df2 <- as.data.frame(Reduce(cbind, lapply(tags, function(i) sapply(t, function(j) +(any(grepl(i, j), na.rm = TRUE))))))
names(df2) <- tags
movies=cbind(movies,df2)
movies = subset(movies,select = c(id,title,popularity,revenue,runtime,9:28,vote_average,vote_count)) #change column orderings
movies=movies[movies$vote_average != 0,]
movies=movies[!is.na(movies$runtime),]
cor(movies$vote_average,movies$vote_count)
cor(movies$vote_average,movies$runtime)
revenue_zeros = movies$revenue[movies$revenue == 0]
length(revenue_zeros)
length(revenue_zeros) / length(movies$revenue)
popularity_zeros = movies$popularity[movies$popularity == 0]
length(popularity_zeros)
length(popularity_zeros) / length(movies$popularity)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
movies$revenue = movies$revenue/max(movies$revenue)
movies$popularity = movies$popularity/max(movies$popularity)
#movies$budget = movies$budget/max(movies$budget)
movies$runtime = movies$runtime/max(movies$runtime)
movies$vote_count = movies$vote_count/max(movies$vote_count)
ggplot(movies, aes(x=vote_average)) + geom_histogram()
ggplot(movies, aes(x=vote_count)) + geom_histogram()
#draw box plot of Popularity feature.(column=3)
OUTLIERS <- boxplot(movies$popularity,xlab="Popularity")$out #outlier values.
movies <- movies[-which(movies$popularity %in% OUTLIERS),] # Removed outlier values from popularity column
#draw box plot of Revenue feature.(column=4)
OUTLIERS <- boxplot(movies$revenue)$out #outlier values.
movies <- movies[-which(movies$revenue %in% OUTLIERS),] # Removed outlier values from revenue column
#draw box plot of Vote-Count feature.(column=27)
OUTLIERS <- boxplot(movies$vote_count)$out #outlier values.
movies <- movies[-which(movies$vote_count %in% OUTLIERS),] # Removed outlier values from vote_count column
sep = c(-Inf,mean(movies$vote_average),Inf)
movie_types = c("Bad","Good")
movies$vote_average_cat <- cut(movies$vote_average,breaks = sep,labels = movie_types)
colnames(movies)[9] = "Science_Fiction"
colnames(movies)[25] = "TV_Movie"
library(corrplot) # to draw correlation matrix
# Draw correlation matrix
# We first looked at the matrix and popularity, revenue and vote_count were
#found to be correlated.
sub = subset(movies,select = c(popularity,revenue, runtime, Action, Adventure, Fantasy, Science_Fiction, Crime, Drama, Thriller, Animation, Family, Western, Comedy, Romance, Horror,Mystery,History,War,Music,Documentary,Foreign,TV_Movie,vote_count,vote_average))
summary(sub)
cor(sub)
forcorrplot <- cor(sub)
corrplot(forcorrplot)
corrplot(forcorrplot, method="color")
corrplot(forcorrplot, method="color", order="hclust")
corrplot.mixed(forcorrplot, upper="number", lower="color", order="hclust")
cor(movies$popularity,movies$vote_average)
movies = subset(movies,select = -c(vote_count))
sub = subset(movies,select = c(popularity,revenue, runtime, Action, Adventure, Fantasy, Science_Fiction, Crime, Drama, Thriller, Animation, Family, Western, Comedy, Romance, Horror,Mystery,History,War,Music,Documentary,Foreign,TV_Movie,vote_average))
forcorrplot <- cor(sub)
corrplot(forcorrplot)
#MODEL DEVELOPMENT
#Desicion Tree
dt_acc <- numeric()
dt_recall <- numeric()
dt_precision <- numeric()
dt_f <- numeric()
dt_acc <- numeric()
dt_recall <- numeric()
dt_precision <- numeric()
dt_f <- numeric()
trial_sum <- numeric(100)
trial_n <- numeric(100)
knn_recall <- numeric()
knn_precision <- numeric()
knn_f <- numeric()
knn_ks = numeric()
rf_acc <- numeric()
rf_recall <- numeric()
rf_precision <- numeric()
rf_f <- numeric()
dt_time = 0
rf_time = 0
knn_time = 0
library(class)
require(randomForest)
set.seed(1815850)
t_1=Sys.time()
for(i in 1:100){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
#Desicion Tree
time_a = Sys.time()
fit2 <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity + revenue,data=movies, split = "deviance",subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
curr_recall = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[2,"Bad"])
curr_precision = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[1,"Good"])
curr_f = 2 * (curr_precision * curr_recall) / (curr_precision + curr_recall)
dt_f <- c(dt_f,curr_f)
dt_recall <- c(dt_recall,curr_recall)
dt_precision <- c(dt_precision,curr_precision)
time_b = Sys.time()
dt_time = dt_time + (time_b-time_a)
#Random Forest
time_a = Sys.time()
fit2 <- randomForest(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity + revenue,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
rf_acc <- c(rf_acc, sum(diag(test_predict)) / sum(test_predict))
curr_recall = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[2,"Bad"])
curr_precision = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[1,"Good"])
curr_f = 2 * (curr_precision * curr_recall) / (curr_precision + curr_recall)
rf_f <- c(rf_f,curr_f)
rf_recall <- c(rf_recall,curr_recall)
rf_precision <- c(rf_precision,curr_precision)
time_b = Sys.time()
rf_time = rf_time+(time_b-time_a)
#KNN
time_a=Sys.time()
movies_train <- movies[sub,]
movies_test <- movies[-sub,]
test_size <- nrow(movies_test)
best_k = 0
best_acc=0
"
for(j in 1:30){
predict <- knn(movies_train[,3:26], movies_test[,3:26], movies_train$vote_average_cat, k=j)
curr_acc = sum(predict==movies_test$vote_average_cat) / test_size
if(curr_acc > best_acc){
best_acc = curr_acc
best_k = j
}
}"
time_b=Sys.time()
predict <- knn(movies_train[,3:26], movies_test[,3:26], movies_train$vote_average_cat, k=23)
trial_sum[i] <- trial_sum[i] + sum(predict==movies_test$vote_average_cat)
trial_n[i] <- trial_n[i] + test_size
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
curr_recall = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[2,"Bad"])
curr_precision = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[1,"Good"])
curr_f = 2 * (curr_precision * curr_recall) / (curr_precision + curr_recall)
knn_f <- c(knn_f,curr_f)
knn_recall <- c(knn_recall,curr_recall)
knn_precision <- c(knn_precision,curr_precision)
knn_ks <- c(knn_ks,best_k)
knn_time = knn_time + (time_b-time_a)
}
t_2 = Sys.time()
#Desicion Tree
mean(dt_acc)
mean(dt_recall)
mean(dt_precision)
mean(dt_f)
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Movies With Different Subsets of Data with Desicion Trees")
dt.tr <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity + revenue,data=movies, split = "deviance")
dt.tr
# display the results
summary(dt.tr)
misclass.tree(dt.tr)
# visualize DT
plot(dt.tr,  type = "uniform")
text(dt.tr)
#Random Forest Results
mean(rf_acc)*100
mean(rf_recall)
mean(rf_precision)
mean(rf_f)
sd(rf_acc)*100
sd(dt_acc)*100
a <- sum(movies$vote_average_cat == "Bad")
plot(1-rf_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Movies With Different Subsets of Data with Random Forests")
#KNN Results
mean(trial_sum / trial_n)*100
mean(knn_recall)
mean(knn_precision)
mean(knn_f)
sd(trial_sum / trial_n)*100
plot((1-trial_sum / trial_n)*100, type="l", ylab="Error Rate",xlab="K",main="Error Rate for Movies With Varying K (100 Samples)")
plot(x=knn_ks,y=(1-trial_sum / trial_n)*100, type="p", ylab="Error Rate",xlab="K",main="Error Rate for Movies With Varying K (100 Samples)")
dt_acc <- numeric()
dt_recall <- numeric()
dt_precision <- numeric()
dt_f <- numeric()
trial_sum <- numeric(100)
trial_n <- numeric(100)
knn_recall <- numeric()
knn_precision <- numeric()
knn_f <- numeric()
knn_ks = numeric()
rf_acc <- numeric()
rf_recall <- numeric()
rf_precision <- numeric()
rf_f <- numeric()
dt_time = 0
rf_time = 0
knn_time = 0
library(class)
require(randomForest)
set.seed(1815850)
t_1=Sys.time()
for(i in 1:100){
sub <- sample(1:nrow(movies), size=nrow(movies)*0.7)
#Desicion Tree
time_a = Sys.time()
fit2 <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity + revenue,data=movies, split = "deviance",subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
dt_acc <- c(dt_acc, sum(diag(test_predict)) / sum(test_predict))
curr_recall = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[2,"Bad"])
curr_precision = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[1,"Good"])
curr_f = 2 * (curr_precision * curr_recall) / (curr_precision + curr_recall)
dt_f <- c(dt_f,curr_f)
dt_recall <- c(dt_recall,curr_recall)
dt_precision <- c(dt_precision,curr_precision)
time_b = Sys.time()
dt_time = dt_time + (time_b-time_a)
#Random Forest
time_a = Sys.time()
fit2 <- randomForest(vote_average_cat ~ Action + Adventure + Fantasy + Science_Fiction + Crime +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity + revenue,data=movies,subset = sub)
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
rf_acc <- c(rf_acc, sum(diag(test_predict)) / sum(test_predict))
curr_recall = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[2,"Bad"])
curr_precision = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[1,"Good"])
curr_f = 2 * (curr_precision * curr_recall) / (curr_precision + curr_recall)
rf_f <- c(rf_f,curr_f)
rf_recall <- c(rf_recall,curr_recall)
rf_precision <- c(rf_precision,curr_precision)
time_b = Sys.time()
rf_time = rf_time+(time_b-time_a)
#KNN
time_a=Sys.time()
movies_train <- movies[sub,]
movies_test <- movies[-sub,]
test_size <- nrow(movies_test)
best_k = 0
best_acc=0
for(j in 1:30){
predict <- knn(movies_train[,3:26], movies_test[,3:26], movies_train$vote_average_cat, k=j)
curr_acc = sum(predict==movies_test$vote_average_cat) / test_size
if(curr_acc > best_acc){
best_acc = curr_acc
best_k = j
}
}
time_b=Sys.time()
predict <- knn(movies_train[,3:26], movies_test[,3:26], movies_train$vote_average_cat, k=best_k)
trial_sum[i] <- trial_sum[i] + sum(predict==movies_test$vote_average_cat)
trial_n[i] <- trial_n[i] + test_size
test_predict <- table(predict(fit2, movies[-sub, ], type = "class"), movies[-sub, "vote_average_cat"])
curr_recall = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[2,"Bad"])
curr_precision = test_predict[1,"Bad"]/(test_predict[1,"Bad"]+test_predict[1,"Good"])
curr_f = 2 * (curr_precision * curr_recall) / (curr_precision + curr_recall)
knn_f <- c(knn_f,curr_f)
knn_recall <- c(knn_recall,curr_recall)
knn_precision <- c(knn_precision,curr_precision)
knn_ks <- c(knn_ks,best_k)
knn_time = knn_time + (time_b-time_a)
}
t_2 = Sys.time()
#Desicion Tree
mean(dt_acc)
mean(dt_recall)
mean(dt_precision)
mean(dt_f)
sd(dt_acc)*100
plot(1-dt_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Movies With Different Subsets of Data with Desicion Trees")
dt.tr <- tree(vote_average_cat ~ Action + Adventure + Fantasy + Crime + Science_Fiction +
Drama + Thriller + Animation + Family + Western + Comedy + Romance + Horror +
Mystery + History + War + Music + Documentary + Foreign + TV_Movie +
popularity + revenue,data=movies, split = "deviance")
dt.tr
# display the results
summary(dt.tr)
misclass.tree(dt.tr)
# visualize DT
plot(dt.tr,  type = "uniform")
text(dt.tr)
#Random Forest Results
mean(rf_acc)*100
mean(rf_recall)
mean(rf_precision)
mean(rf_f)
sd(rf_acc)*100
a <- sum(movies$vote_average_cat == "Bad")
plot(1-rf_acc, type="l", ylab="Error Rate", xlab="Iterations", main="Error Rate for Movies With Different Subsets of Data with Random Forests")
#KNN Results
mean(trial_sum / trial_n)*100
mean(knn_recall)
mean(knn_precision)
mean(knn_f)
sd(trial_sum / trial_n)*100
plot((1-trial_sum / trial_n)*100, type="l", ylab="Error Rate",xlab="K",main="Error Rate for Movies With Varying K (100 Samples)")
plot(x=knn_ks,y=(1-trial_sum / trial_n)*100, type="p", ylab="Error Rate",xlab="K",main="Error Rate for Movies With Varying K (100 Samples)")
dt_time/100
rf_time/100
knn_time/100
t_2 - t_1
set.seed(2015-04-13)
accs = (trial_sum / trial_n)*100
d = data.frame(x =seq(1:100),
ks = knn_ks,
accs = accs)
par(mar = c(5,5,2,5))
with(d, plot(x, accs, type="l", col="red3",xlab="Iterations",
ylab="Accuracy",
ylim=c(95,99)))
par(new = T)
with(d, plot(x, ks, pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'Best K Values')
